{
  "snippet_1731271750479_nqphmt": {
    "prefix": "if? _ { .. }else{ .. }",
    "body": [
      "if $1 { $2 }else{ $3 }"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_fqriik": {
    "prefix": "list!",
    "body": [
      "list![\"${1:args}\"]"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_chdmqs": {
    "prefix": "pub(crate) ",
    "body": [
      "pub(crate) $1"
    ]
  },
  "snippet_1731271750478_ymjkqb": {
    "prefix": "/DEBUG",
    "body": [
      "// DEBUG: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_lqugad": {
    "prefix": "match Result<_, _> { .. }",
    "body": [
      "match $1 {",
      "    Ok(v) => $2,",
      "    Err(e) => $3",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_mnbnss": {
    "prefix": "/[i]",
    "body": [
      "// [ ]: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_yesqyy": {
    "prefix": "/BUG",
    "body": [
      "// BUG: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_fpxwjg": {
    "prefix": ".clone",
    "body": [
      ".clone()"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_iwbpfn": {
    "prefix": "deq!",
    "body": [
      "deq!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_smbtej": {
    "prefix": "mod tests { .. }",
    "body": [
      "#[cfg(test)]",
      "mod tests {",
      "    use super::*;",
      "",
      "    #[test]",
      "    fn $1() {",
      "        ${0:// TODO: ...}",
      "    }",
      "}"
    ]
  },
  "snippet_1731271750479_xmhklf": {
    "prefix": "fn _() { .. }",
    "body": [
      "fn $1($2) ${3:-> }{",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_ssyhra": {
    "prefix": "pub fn new() -> Self { .. }",
    "body": [
      "/// Creates a new instance of $1",
      "pub fn new($2) -> Self {",
      "    Self {",
      "        ${0}",
      "    }",
      "}"
    ]
  },
  "snippet_1731271750479_qrdzuy": {
    "prefix": "enum { .. } impl { .. }",
    "body": [
      "/// ...",
      "enum $1 {",
      "    $2",
      "}",
      "",
      "impl $1 {",
      "    $3",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_lhahnu": {
    "prefix": "impl Default for _ { .. }",
    "body": [
      "impl Default for $1 {",
      "    fn default() -> Self {",
      "        Self {",
      "            $0",
      "        }",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_hrjzqv": {
    "prefix": "let _ = ..;",
    "body": [
      "let $1 = $0;"
    ]
  },
  "snippet_1731271750479_ijsddk": {
    "prefix": "mod _;",
    "body": [
      "mod $1;"
    ]
  },
  "snippet_1731271750479_mjjsra": {
    "prefix": "pub(in crate::_) ",
    "body": [
      "pub(in crate::$1) $0"
    ]
  },
  "snippet_1731271750479_dcvuye": {
    "prefix": "mod _ { .. }",
    "body": [
      "mod $1 {",
      "    ${0:// TODO: ...}",
      "}"
    ]
  },
  "snippet_1731271750478_doupzt": {
    "prefix": "/TODO",
    "body": [
      "// TODO: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_xmzscl": {
    "prefix": "/HACK",
    "body": [
      "// HACK: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_gyswbd": {
    "prefix": ".iter",
    "body": [
      ".iter()"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_upemmp": {
    "prefix": "type _ = ..;",
    "body": [
      "type $1 = $0;"
    ]
  },
  "snippet_1731271750478_gxsgwq": {
    "prefix": "set!",
    "body": [
      "set![\"${1:args}\"]"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_ttugkn": {
    "prefix": "impl From<_> for _ { .. }",
    "body": [
      "impl From<$1> for $2 {",
      "    fn from(v: $1) -> Self {",
      "        $0",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_uwivqk": {
    "prefix": "mod _;  use _::..;",
    "body": [
      "mod $1;  use $1::$0;"
    ]
  },
  "snippet_1731271750479_rqpert": {
    "prefix": "static _: _ = ..;",
    "body": [
      "static $1: $2 = $0;"
    ]
  },
  "snippet_1731271750478_nzxpca": {
    "prefix": ".collect",
    "body": [
      ".collect()"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_iqnouu": {
    "prefix": "if _ { .. } else { .. }",
    "body": [
      "if $1 {",
      "    ${2:// TODO: ...}",
      "} else {",
      "    ${3:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_jpzigq": {
    "prefix": "const _: _ = ..;",
    "body": [
      "const $1: $2 = $0;"
    ]
  },
  "snippet_1731271750479_palmso": {
    "prefix": "unsafe { .. }",
    "body": [
      "unsafe {",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_ufkcmp": {
    "prefix": "impl _ { .. }",
    "body": [
      "impl $1 {",
      "    $0",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_jkxceo": {
    "prefix": "impl Display for _ { .. }",
    "body": [
      "impl std::fmt::Display for $1 {",
      "    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
      "        write!(f, \"$0\")",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_yxwrvg": {
    "prefix": "impl Deref for _ { .. }",
    "body": [
      "impl std::ops::Deref for $1 {",
      "    type Target = $2;",
      "",
      "    fn deref(&self) -> &Self::Target {",
      "        $0",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_glifpg": {
    "prefix": "mod _;  use _::{ .. }",
    "body": [
      "mod $1;  use $1::{ $0 };"
    ]
  },
  "snippet_1731271750479_ahgleq": {
    "prefix": "trait _ { .. }",
    "body": [
      "/// ...",
      "trait $1 {",
      "    $0",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_qeupxq": {
    "prefix": "/OPTIMIZE",
    "body": [
      "// OPTIMIZE: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_xvhdor": {
    "prefix": "panic!",
    "body": [
      "panic!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_fjmvqc": {
    "prefix": "impl Serialize for _ { .. }",
    "body": [
      "impl Serialize for $1 {",
      "    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>",
      "    where",
      "        S: serde::Serializer,",
      "    {",
      "        $0",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_qwokyg": {
    "prefix": "if let _ = _ { .. }",
    "body": [
      "if let ${1|Some(v),Ok(v),Err(e)|} = $2 {",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_zqetcq": {
    "prefix": "#cfg",
    "body": [
      "#[cfg(${1:test|debug_assertions|feature|target_os})]"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_mqytgj": {
    "prefix": "use _::{ .. }",
    "body": [
      "use $1::{ $0 };"
    ]
  },
  "snippet_1731271750479_gqrwyx": {
    "prefix": "fn main() { .. }",
    "body": [
      "fn main() ${1:-> Result<()> }{",
      "    ${0:println!(\"Hello, world!\");}",
      "    ${2:\n    Ok(())}",
      "}"
    ]
  },
  "snippet_1731271750479_sfpdty": {
    "prefix": "fn test_() { .. }",
    "body": [
      "#[test]",
      "fn test_$1() ${2:-> Result<()> }{",
      "    ${0:// TODO: ...}",
      "",
      "    ${3:Ok(())}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_izhdck": {
    "prefix": "while let _ = _ { .. }",
    "body": [
      "while let ${1|Some(v),Ok(v),Err(e)|} = $2 {",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_ssbtnc": {
    "prefix": "hello_world",
    "body": [
      "println!(\"Hello, world!\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_nrrclr": {
    "prefix": "struct _ { .. } impl { .. }",
    "body": [
      "/// ...",
      "struct $1 {",
      "    $2",
      "}",
      "",
      "impl $1 {",
      "    $3",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_vjjwuo": {
    "prefix": ".expect",
    "body": [
      ".expect()"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_lpgzzm": {
    "prefix": "/[x]",
    "body": [
      "// [x]: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_jpawun": {
    "prefix": ".to_string",
    "body": [
      ".to_string()"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_dkivob": {
    "prefix": "format!",
    "body": [
      "format!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_zmrjme": {
    "prefix": "pub ",
    "body": [
      "pub $1"
    ]
  },
  "snippet_1731271750478_yqlpho": {
    "prefix": "/NOTE",
    "body": [
      "// NOTE: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_jymjjk": {
    "prefix": "for _ in _ { .. }",
    "body": [
      "for $1 in $2 {",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_ucddlo": {
    "prefix": "map!",
    "body": [
      "map! {\"${1:args}\"}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_ozreif": {
    "prefix": "impl Into<_> for _ { .. }",
    "body": [
      "impl Into<$1> for $2 {",
      "    fn into(self) -> $1 {",
      "        $0",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_ftpgbr": {
    "prefix": "while _ { .. }",
    "body": [
      "while $1 {",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_bmgigs": {
    "prefix": "#allow",
    "body": [
      "#[allow(${1:dead_code|unused_variables|unused_imports})]"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_sdvhcv": {
    "prefix": "impl Error for _ { .. }",
    "body": [
      "impl std::error::Error for $1 {}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_uwxuji": {
    "prefix": "println!",
    "body": [
      "println!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_gqonld": {
    "prefix": "impl AsRef<_> for _ { .. }",
    "body": [
      "impl AsRef<$1> for $2 {",
      "    fn as_ref(&self) -> &$1 {",
      "        $0",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_fgcmsx": {
    "prefix": "loop { .. }",
    "body": [
      "loop {",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_eowhxj": {
    "prefix": "let mut _ = ..;",
    "body": [
      "let mut $1 = $0;"
    ]
  },
  "snippet_1731271750479_aoeeui": {
    "prefix": "pub fn build() -> _ { .. }",
    "body": [
      "/// Builds the $1 instance",
      "pub fn build(self) -> Result<$1> {",
      "    Ok($1 {",
      "        ${0}",
      "    })",
      "}"
    ]
  },
  "snippet_1731271750478_pwvmpp": {
    "prefix": "/FIXME",
    "body": [
      "// FIXME: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_fbyhnm": {
    "prefix": "vec!",
    "body": [
      "vec!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_ngvvgg": {
    "prefix": "assert_eq!",
    "body": [
      "assert_eq!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_cqogdi": {
    "prefix": "/REVIEW",
    "body": [
      "// REVIEW: ${1:...}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_avubnu": {
    "prefix": ".into_iter",
    "body": [
      ".into_iter()"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_yalhmp": {
    "prefix": "str!",
    "body": [
      "str!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_vyhiow": {
    "prefix": "use _::_;",
    "body": [
      "use $1::$0;"
    ]
  },
  "snippet_1731271750479_hhdniy": {
    "prefix": "if _ { .. }",
    "body": [
      "if $1 {",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_nrpdnf": {
    "prefix": "match _ { .. }",
    "body": [
      "match $1 {",
      "    $2 => $3,",
      "    _ => ${4:panic!()}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_byqiae": {
    "prefix": "re!",
    "body": [
      "re!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_oixtlm": {
    "prefix": "pub(super) ",
    "body": [
      "pub(super) $1"
    ]
  },
  "snippet_1731271750479_dxxbmj": {
    "prefix": "async { .. }",
    "body": [
      "async {",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_cbseyt": {
    "prefix": "impl _ for _ { .. }",
    "body": [
      "impl $1 for $2 {",
      "    $0",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_uzejgh": {
    "prefix": "impl Clone for _ { .. }",
    "body": [
      "impl Clone for $1 {",
      "    fn clone(&self) -> Self {",
      "        Self {",
      "            $0",
      "        }",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_ilfrou": {
    "prefix": ".unwrap",
    "body": [
      ".unwrap()"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_baubci": {
    "prefix": "impl Debug for _ { .. }",
    "body": [
      "impl std::fmt::Debug for $1 {",
      "    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
      "        f.debug_struct(\"$1\")",
      "            $0",
      "            .finish()",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_gnydmb": {
    "prefix": "impl<'de> Deserialize<'de> for _ { .. }",
    "body": [
      "impl<'de> Deserialize<'de> for $1 {",
      "    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>",
      "    where",
      "        D: serde::Deserializer<'de>,",
      "    {",
      "        use serde::de::Error;",
      "        $0",
      "    }",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_gwjpby": {
    "prefix": "impl Stream for _ { .. }",
    "body": [
      "impl Stream for $1 {",
      "    type Item = $2;",
      "",
      "    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {",
      "        $0",
      "    }",
      "}"
    ]
  },
  "snippet_1731271750479_hvewjm": {
    "prefix": "pub fn builder() -> _Builder { .. }",
    "body": [
      "/// Creates a new builder for $1",
      "pub fn builder() -> $1Builder {",
      "    $1Builder::default()",
      "}"
    ]
  },
  "snippet_1731271750478_onuggq": {
    "prefix": "#derive",
    "body": [
      "#[derive(${1:Debug|Display|Clone|Copy|Eq|PartialEq|Ord|PartialOrd|Hash|Serialize|Deserialize|Default|Send|Sync})]"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_vkmpcw": {
    "prefix": "assert!",
    "body": [
      "assert!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_vybrjj": {
    "prefix": "struct _ { .. }",
    "body": [
      "/// ...",
      "struct $1 {",
      "    $0",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_uckfhy": {
    "prefix": "match Option<_> { .. }",
    "body": [
      "match $1 {",
      "    Some(v) => $2,",
      "    None => $3",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_cilaze": {
    "prefix": "dbg!",
    "body": [
      "dbg!(\"${1:args}\")"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_tnfcwg": {
    "prefix": "async fn main() { .. }",
    "body": [
      "#[${1|tokio::main,async_std::main,actix_web::main,axum::main|}]",
      "async fn main() ${1:-> Result<()> }{",
      "    ${0:println!(\"Hello, world!\");}",
      "    ${2:\n    Ok(())}",
      "}"
    ]
  },
  "snippet_1731271750479_utxqdl": {
    "prefix": "impl Future for _ { .. }",
    "body": [
      "impl Future for $1 {",
      "    type Output = $2;",
      "",
      "    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {",
      "        $0",
      "    }",
      "}"
    ]
  },
  "snippet_1731271750479_sbledt": {
    "prefix": "enum { .. }",
    "body": [
      "/// ...",
      "enum $1 {",
      "    $0",
      "}"
    ],
    "scope": "rust"
  },
  "snippet_1731271750478_axalxk": {
    "prefix": ".to_owned",
    "body": [
      ".to_owned()"
    ],
    "scope": "rust"
  },
  "snippet_1731271750479_kzpzpf": {
    "prefix": "async fn _() { .. }",
    "body": [
      "async fn $1($2)  ${3:-> }{",
      "    ${0:// TODO: ...}",
      "}"
    ],
    "scope": "rust"
  }
}